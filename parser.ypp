%{
/* Definitions section */
#include "hw3_output.hpp"
#include "source.hpp"
extern int yylineno;
int yylex();
extern int yychar;
void yyerror(const char*);

%}
/* Declarations */

/* Regular tokens */
%token ID
%token NUM
%token STRING

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token CONST
%token TRUE
%token FALSE
%token RETURN


%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA

%right ASSIGN

%left OR

%left AND

%left EQUALITY

%nonassoc RELATIONAL

%left ADDSUB_BINOP

%left MULDIV_BINOP

%right CASTING

%right NOT


%left LPAREN
%left RPAREN

%token LBRACE
%token RBRACE

%nonassoc IF
%nonassoc ELSE


%%
/* Rules */
Program: M_Init Funcs
{
  if(yychar == YYEOF) {
    try {
        Symbol main_symbol = SymbolsRepo::Instance().findSymbol("main");
        if(main_symbol.getType() != VOID_TYPE or (not main_symbol.type.is_function) or (not main_symbol.type.arguments.empty())) {
            throw SymbolNotFound();
        }
    }
    catch(SymbolNotFound& e) {
      output::errorMainMissing();
      exit(0);
    }
    SymbolsRepo::Instance().closeScope();
  }

} ;

/* ******************************************************************************************** */

M_Init: /*epsilon*/
{
  SymbolsRepo::Instance().Initialize();
} ;
/* ******************************************************************************************** */

Funcs: /*epsilon*/
{  } ;
/* ******************************************************************************************** */

Funcs: FuncDecl Funcs
 {  } ;
 /* ******************************************************************************************** */
FuncDecl: RetType ID LPAREN Formals RPAREN
                                            {
                                              try {
                                                SymbolsRepo::Instance().insertSymbol(((IdNode*)$2)->name, (Type(((RetTypeNode*)$1)->type, ((FormalsNode*)$4)->getArgumentsTypes())));
                                                SymbolsRepo::Instance().currentFunctionName = ((IdNode*)$2)->name;
                                                SymbolsRepo::Instance().openNewScope();

                                                for(auto& arg : ((FormalsNode*)$4)->arguments) {
                                                  SymbolsRepo::Instance().insertSymbolAsArgument(arg.name, arg);
                                                }
                                              }
                                              catch (SymbolAlreadyDefinedInScope& e) {
                                                 output::errorDef($2->lineno, ((IdNode*)$2)->name);
                                                 exit(0);
                                              }
                                            }

 LBRACE Statements RBRACE
 {
    SymbolsRepo::Instance().currentFunctionName = "";
    SymbolsRepo::Instance().closeScope();
 } ;

/* ******************************************************************************************** */
RetType: Type
 {
    $$ = new RetTypeNode($1->lineno, ((TypeNode*)$1)->type);
 };
/* ******************************************************************************************** */
RetType: VOID
{
    $$ = new RetTypeNode($1->lineno, VOID_TYPE);
 } ;
/* ******************************************************************************************** */
Formals: /*epsilon*/
{
  $$ = new FormalsNode();
 } ;
/* ******************************************************************************************** */
Formals: FormalsList
{
  $$ = new FormalsNode($1->lineno, ((FormalsListNode*)$1)->args);
 } ;
/* ******************************************************************************************** */
FormalsList: FormalDecl
{
    $$ = new FormalsListNode($1->lineno,  {((FormalDeclNode*)$1)->arg} );
 } ;
/* ******************************************************************************************** */
FormalsList: FormalDecl COMMA FormalsList
{
    $$ = $3;
    ((FormalsListNode*)$$)->addArgument($1->lineno, ((FormalDeclNode*)$1)->arg);
 } ;
/* ******************************************************************************************** */
FormalDecl: TypeAnnotation Type ID
{
    $$ = new FormalDeclNode($3->lineno, ((TypeAnnotationNode*)$1)->is_const, ((TypeNode*)$2)->type, ((IdNode*)$3)->name );
} ;
/* ******************************************************************************************** */
Statements: Statement
{
} ;
/* ******************************************************************************************** */
Statements: Statements Statement
{
} ;
/* ******************************************************************************************** */
Statement: { SymbolsRepo::Instance().openNewScope(); } LBRACE Statements RBRACE
 {
   SymbolsRepo::Instance().closeScope();
 } ;
/* ******************************************************************************************** */
Statement: TypeAnnotation Type ID SC
{
    $$ = HandleDeclaration(((TypeNode*)$2), ((IdNode*)$3));
};
/* ******************************************************************************************** */
Statement: TypeAnnotation Type ID ASSIGN Exp SC
 {
       $$ = HandleDeclarationAssignment(((TypeAnnotationNode*)$1)->is_const, ((TypeNode*)$2), ((IdNode*)$3), ((ExpNode*)$5));
 } ;
/* ******************************************************************************************** */
Statement: ID ASSIGN Exp SC
{
    try {
      Symbol id_sym = SymbolsRepo::Instance().findSymbol(((IdNode*)$1)->name);
      if(id_sym.type.is_const) {
        output::errorConstMismatch($1->lineno);
        exit(0);
      }
      if((id_sym.getType() != ((ExpNode*)$3)->type) and not (id_sym.getType() == INT_TYPE and ((ExpNode*)$3)->type == BYTE_TYPE)) {
          output::errorMismatch($3->lineno);
          exit(0);
      }
    }
    catch(SymbolNotFound& e) {
      output::errorUndef($1->lineno, ((IdNode*)$1)->name);
      exit(0);
    }

} ;
/* ******************************************************************************************** */
Statement: Call SC
{ } ;
/* ******************************************************************************************** */
Statement: RETURN SC
{
  	try {
      Symbol current_function = SymbolsRepo::Instance().findSymbol(SymbolsRepo::Instance().currentFunctionName);
      if(current_function.getType() != VOID_TYPE) {
        output::errorMismatch($1->lineno);
        exit(0);
      }
    }
    catch(SymbolNotFound& e) {
      assert(false);
    }
 } ;
/* ******************************************************************************************** */
Statement: RETURN Exp SC
{
  try {
    Symbol current_function = SymbolsRepo::Instance().findSymbol(SymbolsRepo::Instance().currentFunctionName);
    if((current_function.getType() != ((ExpNode*)$2)->type and
        not (current_function.getType() == INT_TYPE and ((ExpNode*)$2)->type == BYTE_TYPE)) or
        current_function.getType() == VOID_TYPE) {
      output::errorMismatch($1->lineno);
      exit(0);
    }
  }
  catch(SymbolNotFound& e) {
    assert(false);
  }

} ;
/* ******************************************************************************************** */
Statement: IF LPAREN Exp RPAREN M_IF_OPEN_SCOPE Statement %prec IF
 {
   SymbolsRepo::Instance().closeScope();
 } ;
 /* ******************************************************************************************** */
Statement: IF LPAREN Exp RPAREN M_IF_OPEN_SCOPE Statement ELSE
                              {
                                 SymbolsRepo::Instance().closeScope();
                                 SymbolsRepo::Instance().openNewScope();
                              }
Statement
 {
   SymbolsRepo::Instance().closeScope();
 } ;
 /* ******************************************************************************************** */
Statement: WHILE LPAREN Exp RPAREN
                                  {
                                     if(((ExpNode*)$3)->type != BOOL_TYPE) {
                                       output::errorMismatch($3->lineno);
                                       exit(0);
                                     }
                                     SymbolsRepo::Instance().openNewScope();
                                     SymbolsRepo::Instance().openLoop();
                                  }
 Statement
 {
      SymbolsRepo::Instance().closeScope();
      SymbolsRepo::Instance().closeLoop();
 } ;
 /* ******************************************************************************************** */
Statement: BREAK SC
 {
    if(not SymbolsRepo::Instance().isInLoop()) {
      output::errorUnexpectedBreak($1->lineno);
      exit(0);
    }
 } ;
 /* ******************************************************************************************** */
Statement: CONTINUE SC
 {
   if(not SymbolsRepo::Instance().isInLoop()) {
     output::errorUnexpectedContinue($1->lineno);
     exit(0);
   }
 } ;
 /* ******************************************************************************************** */
Call: ID LPAREN ExpList RPAREN
 {
   try {
     Symbol id_sym = SymbolsRepo::Instance().findSymbol(((IdNode*)$1)->name);
     if(not id_sym.type.is_function) {
        throw SymbolNotFound();
     }
     if(not hasSameArguments(id_sym.type.arguments, ((ExpListNode*)$3)->types)) {
       std::vector<std::string> args_as_strings = id_sym.type.getArgumentsAsStrings();
       output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, args_as_strings);
       exit(0);
     }
     $$ = new CallNode($4->lineno, id_sym.getType());
   }
   catch(SymbolNotFound& e) {
     output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
     exit(0);
   }
 } ;
 /* ******************************************************************************************** */
Call: ID LPAREN RPAREN
 {
   try {
     Symbol id_sym = SymbolsRepo::Instance().findSymbol(((IdNode*)$1)->name);
     if(not id_sym.type.is_function) {
        throw SymbolNotFound();
     }
     std::vector<Type> empty_arg_list;
     if(not hasSameArguments(id_sym.type.arguments, empty_arg_list)) {
       std::vector<std::string> args_as_strings = id_sym.type.getArgumentsAsStrings();
       output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, args_as_strings);
       exit(0);
     }
     $$ = new CallNode($3->lineno, id_sym.getType());
   }
   catch(SymbolNotFound& e) {
     output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
     exit(0);
   }
 } ;
 /* ******************************************************************************************** */
ExpList: Exp
 {
    $$ = new ExpListNode($1->lineno);
    ((ExpListNode*)$$)->addExp(((ExpNode*)$1)->type);
 } ;
 /* ******************************************************************************************** */
ExpList: Exp COMMA ExpList
 {
    $$ = $3;
    ((ExpListNode*)$$)->addExp(((ExpNode*)$1)->type);
 } ;
 /* ******************************************************************************************** */
Type: INT
 {
   $$ = new TypeNode(INT_TYPE, $1->lineno);
 } ;
 /* ******************************************************************************************** */
Type: BYTE
 {
     $$ = new TypeNode(BYTE_TYPE, $1->lineno);
 } ;
 /* ******************************************************************************************** */
Type: BOOL
 {
   $$ = new TypeNode(BOOL_TYPE, $1->lineno);
 } ;
 /* ******************************************************************************************** */
TypeAnnotation: /*epsilon*/
{
   $$ = new TypeAnnotationNode(false);
} ;
/* ******************************************************************************************** */
TypeAnnotation: CONST
{
  $$ = new TypeAnnotationNode(true, $1->lineno);
} ;
/* ******************************************************************************************** */
Exp: LPAREN Exp RPAREN
  {
    $$ = $2;
  } ;
  /* ******************************************************************************************** */
Exp: Exp MULDIV_BINOP Exp
  {
    $$ = HandleBinopExp(((ExpNode*)$1), ((Binop*)$2), ((ExpNode*)$3));
  } ;
  /* ******************************************************************************************** */
Exp: Exp ADDSUB_BINOP Exp
  {
      $$ = HandleBinopExp(((ExpNode*)$1), ((Binop*)$2), ((ExpNode*)$3;
  };
  /* ******************************************************************************************** */
Exp: ID
  {
      $$ = HandleIDExp(((IdNode*)$1));
  } ;
  /* ******************************************************************************************** */
Exp: Call
  {
    $$ = new ExpNode($1->lineno, ((CallNode*)$1)->type);
  } ;
  /* ******************************************************************************************** */
Exp: NUM
  {
    $$ = new ExpNode($1->lineno, INT_TYPE,((NumNode*)$1)->value,true);
  } ;
  /* ******************************************************************************************** */
Exp: NUM B
  {
    if(((NumNode*)$1)->getNumber() > 255) {
        output::errorByteTooLarge($1->lineno, ((NumNode*)$1)->value);
        exit(0);
    }
    $$ = new ExpNode($1->lineno, BYTE_TYPE,((NumNode*)$1)->value,true);
  } ;
  /* ******************************************************************************************** */
Exp: STRING
  {
    std::string reg = generateValue(STRING_TYPE, ((StringNode*)$1)->value);
    $$ = new ExpNode($1->lineno, STRING_TYPE, reg, true);
  } ;
  /* ******************************************************************************************** */
Exp: TRUE
  {
    $$ = new BoolExpNode($1->lineno, BOOL_TYPE, true);
  } ;
  /* ******************************************************************************************** */
Exp: FALSE
  {
   $$ = new BoolExpNode($1->lineno, BOOL_TYPE, false);
  } ;
  /* ******************************************************************************************** */
Exp: NOT Exp
  {
    if(((ExpNode*)$2)->type != BOOL_TYPE) {
      output::errorMismatch($2->lineno);
      exit(0);
    }

    $$ = $2;
    ((BoolExpNode*)$$)->applyNOT();
  } ;
  /* ******************************************************************************************** */
Exp: Exp AND M Exp
  {
    if(((ExpNode*)$1)->type != BOOL_TYPE){
      output::errorMismatch($1->lineno);
      exit(0);
    }
    if(((ExpNode*)$4)->type != BOOL_TYPE){
      output::errorMismatch($4->lineno);
      exit(0);
    }
    $$ = $1;
    ((BoolExpNode*)$$)->applyAND(((MNode*)$3)->label, ((BoolExpNode*)$4))
  } ;
  /* ******************************************************************************************** */
Exp: Exp OR M Exp
  {
    if(((ExpNode*)$1)->type != BOOL_TYPE){
      output::errorMismatch($1->lineno);
      exit(0);
    }
    if(((ExpNode*)$4)->type != BOOL_TYPE){
      output::errorMismatch($4->lineno);
      exit(0);
    }
    $$ = $1;
    ((BoolExpNode*)$$)->applyOR(((MNode*)$3)->label, ((BoolExpNode*)$4))
   } ;
  /* ******************************************************************************************** */
Exp: Exp RELATIONAL Exp
  {
    if((((ExpNode*)$1)->type != INT_TYPE) and (((ExpNode*)$1)->type != BYTE_TYPE)) {
      output::errorMismatch($1->lineno);
      exit(0);
    }
    if((((ExpNode*)$3)->type != INT_TYPE) and (((ExpNode*)$3)->type != BYTE_TYPE)) {
      output::errorMismatch($3->lineno);
      exit(0);
    }
    $$ = new ExpNode($3->lineno, BOOL_TYPE);
  } ;
  /* ******************************************************************************************** */
Exp: Exp EQUALITY Exp
  {
    if(((ExpNode*)$1)->type != INT_TYPE and ((ExpNode*)$1)->type != BYTE_TYPE) {
      output::errorMismatch($1->lineno);
      exit(0);
    }
    if(((ExpNode*)$3)->type != INT_TYPE and ((ExpNode*)$3)->type != BYTE_TYPE) {
      output::errorMismatch($3->lineno);
      exit(0);
    }
    $$ = new ExpNode($3->lineno, BOOL_TYPE);
  } ;
  /* ******************************************************************************************** */
Exp: LPAREN Type RPAREN
                        {
                          if(((TypeNode*)$2)->type != INT_TYPE and ((TypeNode*)$2)->type != BYTE_TYPE) {
                            output::errorMismatch($2->lineno);
                            exit(0);
                          }
                        }
 Exp %prec CASTING
  {
    if(((ExpNode*)$5)->type != INT_TYPE and ((ExpNode*)$5)->type != BYTE_TYPE) {
      output::errorMismatch($5->lineno);
      exit(0);
    }
    $$ = new ExpNode($5->lineno, ((TypeNode*)$2)->type);
  } ;
  /* ******************************************************************************************** */
  M_IF_OPEN_SCOPE: /* epsilon */
  {
     if(((ExpNode*)$-1)->type != BOOL_TYPE) {
       output::errorMismatch($-1->lineno);
       exit(0);
     }
     SymbolsRepo::Instance().openNewScope();
  };
  /* ******************************************************************************************** */
  M: /* epsilon */
  {
     if(((ExpNode*)$-1)->type != BOOL_TYPE) {
       output::errorMismatch($-1->lineno);
       exit(0);
     }
     SymbolsRepo::Instance().openNewScope();
  };
  /* ******************************************************************************************** */
  N: /* epsilon */
  {
     if(((ExpNode*)$-1)->type != BOOL_TYPE) {
       output::errorMismatch($-1->lineno);
       exit(0);
     }
     SymbolsRepo::Instance().openNewScope();
  };
  /* ******************************************************************************************** */
%%

/* C user routines */
int main() {
    return yyparse();
}
void yyerror(char const* msg) {
    output::errorSyn(((Node*) yylval)->lineno);
    exit(0);
}
