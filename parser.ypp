%{
/* Definitions section */
#include "hw3_output.hpp"
#include "IRsource.h"
extern int yylineno;
int yylex();
extern int yychar;
void yyerror(const char*);

%}
/* Declarations */

/* Regular tokens */
%token ID
%token NUM
%token STRING

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token CONST
%token TRUE
%token FALSE
%token RETURN


%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA

%right ASSIGN

%left OR

%left AND

%left EQUALITY

%nonassoc RELATIONAL

%left ADDSUB_BINOP

%left MULDIV_BINOP

%right CASTING

%right NOT


%left LPAREN
%left RPAREN

%token LBRACE
%token RBRACE

%nonassoc IF
%nonassoc ELSE


%%
/* Rules */
Program: M_Init Funcs
 {
  if(yychar == YYEOF) {
    try {
        Symbol main_symbol = SymbolsRepo::Instance().findSymbol("main");
        if(main_symbol.getType() != VOID_TYPE or (not main_symbol.type.is_function) or (not main_symbol.type.arguments.empty())) {
            throw SymbolNotFound();
        }
    }
    catch(SymbolNotFound& e) {
      output::errorMainMissing();
      exit(0);
    }
    SymbolsRepo::Instance().closeScope();
  }

 } ;

/* ******************************************************************************************** */

M_Init: /*epsilon*/
 {
  SymbolsRepo::Instance().Initialize();
  ImplementPrintingFunctions();
 } ;
/* ******************************************************************************************** */

Funcs: /*epsilon*/
 {  } ;
/* ******************************************************************************************** */

Funcs: FuncDecl Funcs
 {  } ;
 /* ******************************************************************************************** */
FuncDecl: RetType ID LPAREN Formals RPAREN
                                            {
                                              HandleFunctionDeclaration(((RetTypeNode*)$1), ((IdNode*)$2), ((FormalsNode*)$4));
                                            }

 LBRACE Statements RBRACE
 {
    HandleEndOfFunction(((StatementNode*)$8));
    SymbolsRepo::Instance().currentFunctionName = "";
    SymbolsRepo::Instance().closeScope();
    CodeBuffer::instance().emit("}");
 } ;

/* ******************************************************************************************** */
RetType: Type
 {
    $$ = new RetTypeNode($1->lineno, ((TypeNode*)$1)->type);
 };
/* ******************************************************************************************** */
RetType: VOID
 {
    $$ = new RetTypeNode($1->lineno, VOID_TYPE);
 } ;
/* ******************************************************************************************** */
Formals: /*epsilon*/
 {
  $$ = new FormalsNode();
 } ;
/* ******************************************************************************************** */
Formals: FormalsList
 {
  $$ = new FormalsNode($1->lineno, ((FormalsListNode*)$1)->args);
 } ;
/* ******************************************************************************************** */
FormalsList: FormalDecl
 {
    $$ = new FormalsListNode($1->lineno,  {((FormalDeclNode*)$1)->arg} );
 } ;
/* ******************************************************************************************** */
FormalsList: FormalDecl COMMA FormalsList
 {
    $$ = $3;
    ((FormalsListNode*)$$)->addArgument($1->lineno, ((FormalDeclNode*)$1)->arg);
 } ;
/* ******************************************************************************************** */
FormalDecl: TypeAnnotation Type ID
 {
    $$ = new FormalDeclNode($3->lineno, ((TypeAnnotationNode*)$1)->is_const, ((TypeNode*)$2)->type, ((IdNode*)$3)->name );
 } ;
/* ******************************************************************************************** */
Statements: Statement
 {
  $$ = $1;
 } ;
/* ******************************************************************************************** */
Statements: Statements M Statement
 {

    ((StatementNode*)$1)->bpatchNextList(((MNode*)$2)->label);
    ((StatementNode*)$3)->MergeBreakList(((StatementNode*)$1)->break_list);
    $$ = $3;

 } ;
/* ******************************************************************************************** */
Statement: { SymbolsRepo::Instance().openNewScope(); } LBRACE Statements RBRACE
 {
   SymbolsRepo::Instance().closeScope();
   $$ = $3;
 } ;
/* ******************************************************************************************** */
Statement: TypeAnnotation Type ID SC
 {
    $$ = HandleDeclaration(((TypeAnnotationNode*)$1)->is_const, ((TypeNode*)$2), ((IdNode*)$3));
 };
/* ******************************************************************************************** */
Statement: TypeAnnotation Type ID ASSIGN Exp SC
 {
       $$ = HandleDeclarationAssignment(((TypeAnnotationNode*)$1)->is_const, ((TypeNode*)$2), ((IdNode*)$3), ((ExpNode*)$5));
 } ;
/* ******************************************************************************************** */
Statement: ID ASSIGN Exp SC
 {
    $$ = HandleAssignment(((IdNode*)$1), ((ExpNode*)$3));
 } ;
/* ******************************************************************************************** */
Statement: Call SC
 {
  $$ = new StatementNode($2->lineno, NONE);
 } ;
/* ******************************************************************************************** */
Statement: RETURN SC
 {
  	try {
      Symbol current_function = SymbolsRepo::Instance().findSymbol(SymbolsRepo::Instance().currentFunctionName);
      if(current_function.getType() != VOID_TYPE) {
        output::errorMismatch($1->lineno);
        exit(0);
      }
    }
    catch(SymbolNotFound& e) {
      assert(false);
    }
    HandleReturnVoid($2->lineno);
    $$ = new StatementNode($2->lineno, NONE);
 } ;
/* ******************************************************************************************** */
Statement: RETURN Exp SC
 {
    $$ = HandleReturnExp(((ExpNode*)$2));
 } ;
/* ******************************************************************************************** */
Statement: IF LPAREN Exp RPAREN M_IF_OPEN_SCOPE Statement %prec IF
 {
   SymbolsRepo::Instance().closeScope();

   $$ = HandleIfStatement(((BoolExpNode*)$3), ((MNode*)$5)->label, ((StatementNode*)$6));
 } ;
 /* ******************************************************************************************** */
Statement: IF LPAREN Exp RPAREN M_IF_OPEN_SCOPE Statement ELSE N
                              {
                                 SymbolsRepo::Instance().closeScope();
                                 SymbolsRepo::Instance().openNewScope();
                              }
M Statement
  {
   SymbolsRepo::Instance().closeScope();

  $$ = HandleIfElseStatement(((BoolExpNode*)$3), ((MNode*)$5)->label, ((StatementNode*)$6), ((NNode*)$8), ((MNode*)$10)->label, ((StatementNode*)$11));
 } ;
 /* ******************************************************************************************** */
Statement: WHILE M LPAREN Exp RPAREN
                                  {
                                     if(((ExpNode*)$4)->type != BOOL_TYPE) {
                                       output::errorMismatch($4->lineno);
                                       exit(0);
                                     }
                                     SymbolsRepo::Instance().openNewScope();
                                     SymbolsRepo::Instance().openLoop();
                                     $$ = new MNode();
                                  }
 Statement
 {
      SymbolsRepo::Instance().closeScope();
      SymbolsRepo::Instance().closeLoop();
      $$ = HandleWhileStatement(((MNode*)$2)->label, ((BoolExpNode*)$4), ((MNode*)$6)->label, ((StatementNode*)$7));
 } ;
 /* ******************************************************************************************** */
Statement: BREAK SC
 {
    $$ = HandleBreak($1->lineno);
 } ;
 /* ******************************************************************************************** */
Statement: CONTINUE SC
 {
    $$ = HandleContinue($1->lineno);
 } ;
 /* ******************************************************************************************** */
Call: ID LPAREN ExpList RPAREN
 {
   $$ = HandleFunctionCall(((IdNode*)$1), ((ExpListNode*)$3));
 } ;
 /* ******************************************************************************************** */
Call: ID LPAREN RPAREN
 {
   $$ = HandleFunctionCall(((IdNode*)$1));
 } ;
 /* ******************************************************************************************** */
ExpList: Exp
 {
    $$ = new ExpListNode($1->lineno);
    ((ExpListNode*)$$)->addExp(((ExpNode*)$1));
 } ;
 /* ******************************************************************************************** */
ExpList: Exp COMMA ExpList
 {
    $$ = $3;
    ((ExpListNode*)$$)->addExp(((ExpNode*)$1));
 } ;
 /* ******************************************************************************************** */
Type: INT
 {
   $$ = new TypeNode(INT_TYPE, $1->lineno);
 } ;
 /* ******************************************************************************************** */
Type: BYTE
 {
     $$ = new TypeNode(BYTE_TYPE, $1->lineno);
 } ;
 /* ******************************************************************************************** */
Type: BOOL
 {
   $$ = new TypeNode(BOOL_TYPE, $1->lineno);
 } ;
 /* ******************************************************************************************** */
TypeAnnotation: /*epsilon*/
  {
   $$ = new TypeAnnotationNode(false);
  } ;
/* ******************************************************************************************** */
TypeAnnotation: CONST
  {
  $$ = new TypeAnnotationNode(true, $1->lineno);
  } ;
/* ******************************************************************************************** */
Exp: LPAREN Exp RPAREN
  {
    $$ = $2;
    ((ExpNode*)$$)->is_literal = false;
  } ;
  /* ******************************************************************************************** */
Exp: Exp MULDIV_BINOP Exp
  {
    $$ = HandleBinopExp(((ExpNode*)$1), ((Binop*)$2), ((ExpNode*)$3));
  } ;
  /* ******************************************************************************************** */
Exp: Exp ADDSUB_BINOP Exp
  {
      $$ = HandleBinopExp(((ExpNode*)$1), ((Binop*)$2), ((ExpNode*)$3));
  };
  /* ******************************************************************************************** */
Exp: ID
  {
      $$ = HandleIDExp(((IdNode*)$1));
  } ;
  /* ******************************************************************************************** */
Exp: Call
  {
    $$ = HandleExpCall(((CallNode*)$1));
  } ;
  /* ******************************************************************************************** */
Exp: NUM
  {
    $$ = new ExpNode($1->lineno, INT_TYPE,((NumNode*)$1)->value, true);
  } ;
  /* ******************************************************************************************** */
Exp: NUM B
  {
    if(((NumNode*)$1)->getNumber() > 255) {
        output::errorByteTooLarge($1->lineno, ((NumNode*)$1)->value);
        exit(0);
    }
    $$ = new ExpNode($1->lineno, BYTE_TYPE,((NumNode*)$1)->value, true);
  } ;
  /* ******************************************************************************************** */
Exp: STRING
  {
    std::string reg = generateValue(STRING_TYPE, ((StringNode*)$1)->value);
    $$ = new ExpNode($1->lineno, STRING_TYPE, reg, true);
  } ;
  /* ******************************************************************************************** */
Exp: TRUE
  {
    $$ = new BoolExpNode($1->lineno, true);
  } ;
  /* ******************************************************************************************** */
Exp: FALSE
  {
   $$ = new BoolExpNode($1->lineno, false);
  } ;
  /* ******************************************************************************************** */
Exp: NOT Exp
  {
    if(((ExpNode*)$2)->type != BOOL_TYPE) {
      output::errorMismatch($2->lineno);
      exit(0);
    }

    $$ = $2;
    ((BoolExpNode*)$$)->applyNOT();
  } ;
  /* ******************************************************************************************** */
Exp: Exp AND M Exp
  {
    if(((ExpNode*)$1)->type != BOOL_TYPE){
      output::errorMismatch($1->lineno);
      exit(0);
    }
    if(((ExpNode*)$4)->type != BOOL_TYPE){
      output::errorMismatch($4->lineno);
      exit(0);
    }
    $$ = $1;
    ((BoolExpNode*)$$)->applyAND(((MNode*)$3)->label, ((BoolExpNode*)$4));
  } ;
  /* ******************************************************************************************** */
Exp: Exp OR M Exp
  {
    if(((ExpNode*)$1)->type != BOOL_TYPE){
      output::errorMismatch($1->lineno);
      exit(0);
    }
    if(((ExpNode*)$4)->type != BOOL_TYPE){
      output::errorMismatch($4->lineno);
      exit(0);
    }
    $$ = $1;
    ((BoolExpNode*)$$)->applyOR(((MNode*)$3)->label, ((BoolExpNode*)$4));
   } ;
  /* ******************************************************************************************** */
Exp: Exp RELATIONAL Exp
  {
    $$ = HandleRelopExp(((ExpNode*)$1),((Relop*)$2)->type , ((ExpNode*)$3));
  } ;
  /* ******************************************************************************************** */
Exp: Exp EQUALITY Exp
  {
    $$ = HandleRelopExp(((ExpNode*)$1),((Relop*)$2)->type , ((ExpNode*)$3));
  } ;
  /* ******************************************************************************************** */
Exp: LPAREN Type RPAREN
                        {
                          if(((TypeNode*)$2)->type != INT_TYPE and ((TypeNode*)$2)->type != BYTE_TYPE) {
                            output::errorMismatch($2->lineno);
                            exit(0);
                          }
                        }
 Exp %prec CASTING
  {
    $$ = HandleCasting(((TypeNode*)$2), ((ExpNode*)$5));
  } ;
  /* ******************************************************************************************** */
  M_IF_OPEN_SCOPE: /* epsilon */
  {
     if(((ExpNode*)$-1)->type != BOOL_TYPE) {
       output::errorMismatch($-1->lineno);
       exit(0);
     }
     SymbolsRepo::Instance().openNewScope();
     $$ = new MNode();
  };
  /* ******************************************************************************************** */
  M: /* epsilon */
  {
      $$ = new MNode();
  };
  /* ******************************************************************************************** */

  N: /* epsilon */
  {
    $$ = new NNode();
  };

  /* ******************************************************************************************** */
%%

/* C user routines */
int main() {
   yyparse();
   CodeBuffer::instance().printGlobalBuffer();
   CodeBuffer::instance().printCodeBuffer();
}
void yyerror(char const* msg) {
    output::errorSyn(((Node*) yylval)->lineno);
    exit(0);
}
